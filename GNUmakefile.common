# -*- makefile-gmake -*-

top.com         := ${lastword ${MAKEFILE_LIST}}
top.abs         := ${shell cd '${dir ${top.com}}' ; env PWD= /bin/pwd}/
dir.abs         := ${shell env PWD= /bin/pwd}/
dir.rel         := ${dir.abs:${top.abs}%=%}
dir.last        := ${notdir ${dir.abs:%/=%}}

# -- ================================================================ --
#    Stock Variables

Q               := @
I               := -
C               := $Q $I
P               := printf
R               := /bin/rm -fr
S               := md5sum

ifeq ($(DEBUG),)
OPT             := -O3
DBG             := 
PROF            := 
else
OPT             := -O0
DBG             := -g
PROF            := -fprofile-arcs -ftest-coverage
endif

CSTD            := --std=c99
XSTD            := --std=c++98
ERR             := -W -Wall -Wextra -pedantic -Werror

IPATH           := $(IDIRS:%=-I%)
LPATH           := $(LDIRS:%=-L%)
LDLIBS          := $(LLIBS:%=-l%)

CFLAGS          := $(CSTD) $(OPT) $(PROF) $(ERR) $(IPATH)
CPPFLAGS        := $(XSTD) $(OPT) $(PROF) $(ERR) $(IPATH)
LDFLAGS         := $(LPATH) $(PROF) $(LDLIBS)

# -- ================================================================ --
#    Stock Targets

# building without a target
default::
	$C ${MAKE} cycle

# clean: remove build products.
clean::
	$C true

# undox: remove documentation products.
undox::
	$C true

# build: create build products.
build::
	$C true

# dox: create documentation products.
dox::
	$C true

# test: run package tests.
test::
	$C true

# install: install build products
install::
	$C true

# cycle: run the build/test/install cycle.
cycle::
	$Q ${MAKE} build
	$Q ${MAKE} test
	$Q ${MAKE} install

# world: 
world::
	$Q ${MAKE} clean
	$Q ${MAKE} cycle

# ================
# Markdown Support

MDSRC           := ${wildcard *.md}

ifneq ($(MDSRC),)

MDOUT           := ${MDSRC:%.md=%.html}

dox::           ${MDOUT}

undox::
	$C $R ${MDOUT}

${MDOUT}:       %.html:         %.md
	$Q $P '[md] %s%s\n' '${dir.rel}' '$*'
	$Q markdown $< > $@

endif

# ================
# Doxygen Support

DOXY            := ${wildcard Doxyfile}

ifneq ($(DOXY),)

undox::
	$C $R html latex

dox::
	$C $R html latex
	$C $P '[dx] %s%s\n' '${dir.rel}' 'Doxyfile'
	$Q doxygen > doxygen.log 2>&1

endif

# -- ================================================================ --
#    Recursive Build support

SUBDIRS         := ${dir ${wildcard */GNUmakefile}}

ifneq ($(SUBDIRS),)

# Recursive Targets:
#   clean       clean all subdirectories
#   cycle       build/test/install in each subdirectory
#   dox         build dox in each subdirectory
#   undox       remove prepared documentation
#
# Note that build, test, and install are not themselves recursive
# because each must be built, tested, and installed in turn before
# moving on to the next so that later directories may import from
# earlier ones.
#
# Note also that "world" is not recursive: a world build consists of
# doing a complete recursive clean, followed by a complete recursive
# cycle, for maximum assurance that stale products are never used.

SUBRULES        += clean
SUBRULES        += cycle
SUBRULES        += dox
SUBRULES        += undox

DslashR         = ${foreach R,${SUBRULES},${foreach D,${SUBDIRS},$D$R}}

$(DslashR):
	$Q $(MAKE) -C ${dir $@} ${notdir $@}

$(SUBRULES)::   %:      ${foreach D,${SUBDIRS},$D%}

.PHONY: $(SUBRULES) $(DdlashR)

endif

clean::
	$C $R ut_*_log.xml *.gcda *.gcno *.gcov gmon.out

debug::
	@ printf '%-22s  => "%s"\n' 'top.com' '$(top.com)'
	@ printf '%-22s  => "%s"\n' 'top.abs' '$(top.abs)'
	@ printf '%-22s  => "%s"\n' 'dir.abs' '$(dir.abs)'
	@ printf '%-22s  => "%s"\n' 'dir.rel' '$(dir.rel)'
	@ printf '%-22s  => "%s"\n' 'dir.last' '$(dir.last)'
	@ printf '%-22s  => "%s"\n' 'Q' '$(Q)'
	@ printf '%-22s  => "%s"\n' 'I' '$(I)'
	@ printf '%-22s  => "%s"\n' 'C' '$(C)'
	@ printf '%-22s  => "%s"\n' 'P' '$(P)'
	@ printf '%-22s  => "%s"\n' 'R' '$(R)'
	@ printf '%-22s  => "%s"\n' 'S' '$(S)'
	@ printf '%-22s  => "%s"\n' 'OPT' '$(OPT)'
	@ printf '%-22s  => "%s"\n' 'DBG' '$(DBG)'
	@ printf '%-22s  => "%s"\n' 'PROF' '$(PROF)'
	@ printf '%-22s  => "%s"\n' 'CSTD' '$(CSTD)'
	@ printf '%-22s  => "%s"\n' 'XSTD' '$(XSTD)'
	@ printf '%-22s  => "%s"\n' 'ERR' '$(ERR)'
	@ printf '%-22s  => "%s"\n' 'IPATH' '$(IPATH)'
	@ printf '%-22s  => "%s"\n' 'LPATH' '$(LPATH)'
	@ printf '%-22s  => "%s"\n' 'LDLIBS' '$(LDLIBS)'
	@ printf '%-22s  => "%s"\n' 'CFLAGS' '$(CFLAGS)'
	@ printf '%-22s  => "%s"\n' 'CPPFLAGS' '$(CPPFLAGS)'
	@ printf '%-22s  => "%s"\n' 'LDFLAGS' '$(LDFLAGS)'
	@ printf '%-22s  => "%s"\n' 'MDSRC' '$(MDSRC)'
	@ printf '%-22s  => "%s"\n' 'MDOUT' '$(MDOUT)'
	@ printf '%-22s  => "%s"\n' 'DOXY' '$(DOXY)'
	@ printf '%-22s  => "%s"\n' 'SUBDIRS' '$(SUBDIRS)'
	@ printf '%-22s  => "%s"\n' 'SUBRULES' '$(SUBRULES)'
	@ printf '%-22s  => "%s"\n' 'DslashR' '$(DslashR)'

.FORCE:

.PHONY: default clean undox build dox test install cycle world debug
