.TH "Farsyte::Testing::Test" 3 "Sun Oct 19 2014" "The Farsyte Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Farsyte::Testing::Test \- 
.PP
The \fBTest\fP object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <testing_test\&.hh>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::string \fBdrain\fP ()"
.br
.RI "\fIGet (and clear) accumulated output\&. \fP"
.ti -1c
.RI "template<typename T > \fBTest\fP & \fBoperator<<\fP (T const &t)"
.br
.RI "\fIAppend output text\&. \fP"
.ti -1c
.RI "\fBTest\fP & \fBoperator<<\fP (std::ostream &(*man)(std::ostream &stream))"
.br
.RI "\fIApply I/O manipulator\&. \fP"
.ti -1c
.RI "\fBTest\fP (\fBSuite\fP &\fBref\fP, std::string const &\fBname\fP)"
.br
.RI "\fIConstruct a new \fBTest\fP object\&. \fP"
.ti -1c
.RI "void \fBfail\fP (std::string const &cond)"
.br
.RI "\fIRegister a \fBTest\fP FAIL\&. \fP"
.ti -1c
.RI "void \fBskip\fP (std::string const &cond)"
.br
.RI "\fIRegister a \fBTest\fP SKIP\&. \fP"
.ti -1c
.RI "void \fBerror\fP (std::string const &cond)"
.br
.RI "\fIRegister a \fBTest\fP ERROR\&. \fP"
.ti -1c
.RI "void \fBpass\fP (std::string const &cond)"
.br
.RI "\fIRegister a \fBTest\fP PASS\&. \fP"
.ti -1c
.RI "\fB~Test\fP ()"
.br
.RI "\fI\fBSuite\fP Destructor\&. \fP"
.ti -1c
.RI "int \fBcheck\fP (bool ok, std::string const &msg) __attribute__((unused))"
.br
.RI "\fISupport code for logging a condition check result\&. \fP"
.ti -1c
.RI "template<typename T , typename U > int \fBcheck_op\fP (T const &ov, U const &ev, bool ok, std::string const &op, std::string const &msg) __attribute__((unused))"
.br
.RI "\fISupport Template for performing a condition test\&. \fP"
.ti -1c
.RI "template<typename T > int \fBcheck_op\fP (T const &ov, T const &ev, bool ok, std::string const &op, std::string const &msg) __attribute__((unused))"
.br
.RI "\fISupport Template for performing a condition test\&. \fP"
.ti -1c
.RI "\fBDECL_CHECK_OP\fP (eq,==)"
.br
.RI "\fIStandard Equality Check method\&. \fP"
.ti -1c
.RI "\fBDECL_CHECK_OP\fP (ne,!=)"
.br
.RI "\fIStandard Inequality Check method\&. \fP"
.ti -1c
.RI "\fBDECL_CHECK_OP\fP (ge, >=)"
.br
.RI "\fIStandard Threshold Check method\&. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSuite\fP & \fBref\fP"
.br
.RI "\fI\fBTest\fP \fBSuite\fP associated with this \fBTest\fP\&. \fP"
.ti -1c
.RI "std::string const \fBname\fP"
.br
.RI "\fIName of the test case\&. \fP"
.ti -1c
.RI "int \fBfails\fP"
.br
.RI "\fInumber of FAIL reports for this test\&. \fP"
.ti -1c
.RI "int \fBskips\fP"
.br
.RI "\fInumber of SKIP reports for this test\&. \fP"
.ti -1c
.RI "int \fBerrors\fP"
.br
.RI "\fInumber of ERROR reports for this test\&. \fP"
.ti -1c
.RI "std::ostringstream \fBoss\fP"
.br
.RI "\fIWhere to accumulate the output text\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The \fBTest\fP object\&. 

Derived from Output String Stream\&.
.PP
The \fBTest\fP object constructor writes appropriate opening text to the XML file associatd with the \fBSuite\fP\&. The destructor writes appropriate text to the XML file to close the XML element corresponding to the test\&. Methods on \fBTest\fP objects are available for reporting test conditions that are skipped, test conditions that fail, and errors encountered during testing\&. It is an error to construct a \fBTest\fP object for a \fBSuite\fP that currently has an active \fBTest\fP object\&. Be sure that each \fBTest\fP object goes out of scope before the next one is constructed\&.
.PP
Data sent to this object using the \fC<<\fP operator will be formatted appropriately and displayed by Bamboo as supporting text in appropriate reporting conditions\&. 
.PP
Definition at line 38 of file testing_test\&.hh\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Farsyte::Testing::Test::Test (\fBSuite\fP &ref, std::string const &name)"

.PP
Construct a new \fBTest\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIref\fP - \fBSuite\fP that contains this \fBTest\fP\&. 
.br
\fIname\fP - what to call this \fBTest\fP\&. Generates appropriate header text to the XML text output stream to start a new \fBTest\fP\&. May throw an exception if there is already an existing \fBTest\fP associated with the specified \fBSuite\fP\&. 
.RE
.PP

.SS "Farsyte::Testing::Test::~Test ()"

.PP
\fBSuite\fP Destructor\&. Generates an appropriate trailer to the XML text output stream to close the \fBTest\fP\&. May throw an exception if it appears that this is not the current \fBTest\fP associated with the \fBSuite\fP\&.
.PP
Any text sent to the \fBTest\fP object using the C++ \fC<<\fP operator that was not used in a FAIL, SKIP, or ERROR report will be attached to the test as supporting text\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Farsyte::Testing::Test::check (boolok, std::string const &msg)\fC [inline]\fP"

.PP
Support code for logging a condition check result\&. 
.PP
\fBParameters:\fP
.RS 4
\fIok\fP true if the condition passed, false if it failed\&. 
.br
\fImsg\fP message string to associate with the condition 
.RE
.PP
\fBReturns:\fP
.RS 4
zero if the condition passed, nonzero if it failed\&. 
.RE
.PP

.PP
Definition at line 159 of file testing_test\&.hh\&.
.PP
References fail(), and pass()\&.
.PP
Referenced by check_op()\&.
.PP
.nf
159                                                                               {
160                 if (ok)
161                     return pass(msg), 0;
162                 else
163                     return fail(msg), 1;
164             }
.fi
.SS "template<typename T , typename U > int Farsyte::Testing::Test::check_op (T const &ov, U const &ev, boolok, std::string const &op, std::string const &msg)\fC [inline]\fP"

.PP
Support Template for performing a condition test\&. 
.PP
\fBParameters:\fP
.RS 4
\fIov\fP observed value 
.br
\fIev\fP expected value 
.br
\fIok\fP result of comparison 
.br
\fIop\fP string describing the compare operation 
.br
\fImsg\fP string to associate with the condition 
.RE
.PP
\fBReturns:\fP
.RS 4
zero if the condition passed, nonzero if it failed\&. This template is used if the observed and expected value expressions have different types\&. 
.RE
.PP

.PP
Definition at line 177 of file testing_test\&.hh\&.
.PP
References check()\&.
.PP
.nf
182                                                                {
183 
184                 auto w = oss\&.width();
185 
186                 oss << std::setw(1);
187 
188                 oss << "observed: "
189                     << std::setw(7) << " " << " "
190                     << std::setw((int) w) << ov << std::endl;
191 
192                 oss << "expected: "
193                     << std::setw(7) << op << " "
194                     << std::setw((int) w) << ev << std::endl;
195 
196                 return check(ok, msg);
197             }
.fi
.SS "template<typename T > int Farsyte::Testing::Test::check_op (T const &ov, T const &ev, boolok, std::string const &op, std::string const &msg)\fC [inline]\fP"

.PP
Support Template for performing a condition test\&. 
.PP
\fBParameters:\fP
.RS 4
\fIov\fP observed value 
.br
\fIev\fP expected value 
.br
\fIok\fP result of comparison 
.br
\fIop\fP string describing the compare operation 
.br
\fImsg\fP string to associate with the condition 
.RE
.PP
\fBReturns:\fP
.RS 4
zero if the condition passed, nonzero if it failed\&. This template is used if the observed and expected value expressions have the same type\&. 
.RE
.PP

.PP
Definition at line 210 of file testing_test\&.hh\&.
.PP
References check()\&.
.PP
.nf
215                                                                {
216 
217                 auto w = oss\&.width();
218 
219                 oss << std::setw(1);
220 
221                 oss << "observed: "
222                     << std::setw(7) << " " << " "
223                     << std::setw((int) w) << ov << std::endl;
224 
225                 oss << "expected: "
226                     << std::setw(7) << op << " "
227                     << std::setw((int) w) << ev << std::endl;
228 
229                 return check(ok, msg);
230             }
.fi
.SS "std::string Farsyte::Testing::Test::drain ()\fC [inline]\fP"

.PP
Get (and clear) accumulated output\&. 
.PP
\fBReturns:\fP
.RS 4
a string containing the test output\&. 
.RE
.PP

.PP
Definition at line 61 of file testing_test\&.hh\&.
.PP
.nf
61                               {
62                 std::string s = oss\&.str();
63                 oss\&.str("");
64                 return s;
65             }
.fi
.SS "void Farsyte::Testing::Test::error (std::string const &cond)"

.PP
Register a \fBTest\fP ERROR\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP -- one-line description of the error\&.
.RE
.PP
Sends text to the XML log indicating that a test has encountered a testing error, as described in the parameter string\&. Any accumulated text sent to the \fBTest\fP object with the C++ \fC<<\fP operator will be included in the ERROR object as supporting text\&. 
.SS "void Farsyte::Testing::Test::fail (std::string const &cond)"

.PP
Register a \fBTest\fP FAIL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP -- one-line description of failed condition\&.
.RE
.PP
Sends text to the XML log indicating that a test condition has failed, as described in the parameter string\&. Any accumulated text sent to the \fBTest\fP object with the C++ \fC<<\fP operator will be included in the FAIL object as supporting text\&. 
.PP
Referenced by check()\&.
.SS "template<typename T > \fBTest\fP& Farsyte::Testing::Test::operator<< (T const &t)\fC [inline]\fP"

.PP
Append output text\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt\fP value to print to the test log\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
this test object for further operations\&. 
.RE
.PP

.PP
Definition at line 72 of file testing_test\&.hh\&.
.PP
.nf
72                                          {
73                 oss << t;
74                 return *this;
75             }
.fi
.SS "\fBTest\fP& Farsyte::Testing::Test::operator<< (std::ostream &(*)(std::ostream &stream)man)\fC [inline]\fP"

.PP
Apply I/O manipulator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIman\fP manipulator to apply to the log stream\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
this test object for further operations\&. 
.RE
.PP

.PP
Definition at line 81 of file testing_test\&.hh\&.
.PP
.nf
81                                                                      {
82                 oss << man;
83                 return *this;
84             }
.fi
.SS "void Farsyte::Testing::Test::pass (std::string const &cond)"

.PP
Register a \fBTest\fP PASS\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP -- one-line description of passed condition\&.
.RE
.PP
Mark that a test condition has PASSED\&. There is no XML output for Bamboo in this case\&. The purpose of this call is to correctly assocaite any supporting text sent to the \fBTest\fP object with this PASSING condition rather than including it in a subsequent fail, skip, or error\&. 
.PP
Referenced by check()\&.
.SS "void Farsyte::Testing::Test::skip (std::string const &cond)"

.PP
Register a \fBTest\fP SKIP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP -- one-line description of skipped condition\&.
.RE
.PP
Sends text to the XML log indicating that a test condition has been skipped, as described in the parameter string\&. Any accumulated text sent to the \fBTest\fP object with the C++ \fC<<\fP operator will be included in the SKIP object as supporting text\&. 
.SH "Member Data Documentation"
.PP 
.SS "int Farsyte::Testing::Test::errors"

.PP
number of ERROR reports for this test\&. 
.PP
Definition at line 53 of file testing_test\&.hh\&.
.SS "int Farsyte::Testing::Test::fails"

.PP
number of FAIL reports for this test\&. 
.PP
Definition at line 47 of file testing_test\&.hh\&.
.SS "std::ostringstream Farsyte::Testing::Test::oss"

.PP
Where to accumulate the output text\&. 
.PP
Definition at line 56 of file testing_test\&.hh\&.
.SS "\fBSuite\fP& Farsyte::Testing::Test::ref"

.PP
\fBTest\fP \fBSuite\fP associated with this \fBTest\fP\&. 
.PP
Definition at line 41 of file testing_test\&.hh\&.
.SS "int Farsyte::Testing::Test::skips"

.PP
number of SKIP reports for this test\&. 
.PP
Definition at line 50 of file testing_test\&.hh\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for The Farsyte Toolkit from the source code\&.
