# -*- makefile-gmake -*-

top.sub         := ${lastword ${MAKEFILE_LIST}}
include ${top.sub:%.sub=%.common}

BASE            := ${dir ${dir.abs:%/=%}}
SRCD            := ${BASE}${dir.last}/
OBJD            := ${BASE}obj/
LIBD            := ${BASE}lib/
DEPD            := ${BASE}dep/
BIND            := ${BASE}bin/
LOGD            := ${BASE}log/

# -- ================================================================ --
#    Detected C++ Source Files

ALL_SRC         := ${wildcard ${SRCD}*.cc}

ifneq ($(ALL_SRC),)

ALL_OBJ         := ${ALL_SRC:${SRCD}%.cc=${OBJD}%.o}

# -- ================================================================ --
#    Static Library

ifneq ($(LIBNAME),)

LIBA            := ${LIBD}lib$(LIBNAME).a

${ALL_OBJ}:     ${OBJD}%.o:     ${SRCD}%.cc
	$Q $P '[cc] %s%s\n' '${dir.rel}' '$*'
	$Q $(COMPILE.cc) -MD -MF ${DEPD}$*.d $(OUTPUT_OPTION) $<

$(LIBA):        ${ALL_OBJ}
	$Q $P '[ar] %s%s\n' '${dir.rel}' '$(LIBNAME)'
	$Q $R $@
	$Q ar q $@ ${ALL_OBJ}
	$C $S '$@'

build::         ${ALL_OBJ} ${LIBA}

clean::
	$C $R ${ALL_OBJ} ${LIBA}

endif

# -- ================================================================ --
#    Program from multiple compilation units

ifneq ($(PROGRAM),)

BIN_EXE         := ${BIND}$(PROGRAM).exe

${ALL_OBJ}:     ${OBJD}%.o:     ${SRCD}%.cc
	$Q $P '[cc] %s%s\n' '${dir.rel}' '$*'
	$(COMPILE.cc) -MD -MF ${DEPD}$*.d $(OUTPUT_OPTION) $<

$(BIN_EXE):     ${ALL_OBJ} ${DEP_LIBS}
	$Q $P '[ld] %s%s\n' '${dir.rel}' '$(PROGRAM)'
	$Q $(LINK.cc) ${ALL_OBJ} $(LDLIBS) -o $@
	$C $S '$@'

build::         ${ALL_OBJ} ${BIN_EXE}

clean::
	$C $R ${ALL_OBJ} ${BIN_EXE}

endif

# -- ================================================================ --
#    Single Compilation Unit Program Collection

ifeq ($(LIBNAME),)
ifeq ($(PROGRAM),)

BIN_EXE         := ${ALL_SRC:${SRCD}%.cc=${BIND}%.exe}

${BIN_EXE}:     ${BIND}%.exe:   ${SRCD}%.cc ${DEP_LIBS}
	$Q $P '[cc] %s%s\n' '${dir.rel}' '$*'
	$Q $(LINK.cc) -MD -MF ${DEPD}$*.d $< $(LDLIBS) -o $@
	$C $S '$@'

build::         ${BIN_EXE}

clean::
	$C $R ${BIN_EXE}

TEST_SRC        := ${wildcard ${SRCD}test_*.cc}
ifneq ($(TEST_SRC),)
TEST_EXE        := ${TEST_SRC:${SRCD}%.cc=${BIND}%.exe}
TEST_OUT        := ${TEST_SRC:${SRCD}%.cc=${LOGD}%.out}

${TEST_OUT}:    ${LOGD}%.out:   ${BIND}%.exe
	$Q $P '[ex] %s%s\n' '${dir.rel}' '$*'
	$Q ${BIND}'$*'.exe

build::         ${TEST_OUT}

clean::
	$C $R ${TEST_OUT}

endif

endif
endif
endif

-include ${wildcard ${DEPD}*.d}

clean::
	$C $R ${DEPD}*.d

debug::
	@ printf '%-22s  => "%s"\n' 'top.sub' '$(top.sub)'
	@ printf '%-22s  => "%s"\n' 'BASE' '$(BASE)'
	@ printf '%-22s  => "%s"\n' 'SRCD' '$(SRCD)'
	@ printf '%-22s  => "%s"\n' 'OBJD' '$(OBJD)'
	@ printf '%-22s  => "%s"\n' 'LIBD' '$(LIBD)'
	@ printf '%-22s  => "%s"\n' 'DEPD' '$(DEPD)'
	@ printf '%-22s  => "%s"\n' 'BIND' '$(BIND)'
	@ printf '%-22s  => "%s"\n' 'LOGD' '$(LOGD)'
	@ printf '%-22s  => "%s"\n' 'ALL_SRC' '$(ALL_SRC)'
	@ printf '%-22s  => "%s"\n' 'ALL_OBJ' '$(ALL_OBJ)'
	@ printf '%-22s  => "%s"\n' 'LIBA' '$(LIBA)'
	@ printf '%-22s  => "%s"\n' 'BIN_EXE' '$(BIN_EXE)'
	@ printf '%-22s  => "%s"\n' 'TEST_SRC' '$(TEST_SRC)'
	@ printf '%-22s  => "%s"\n' 'TEST_EXE' '$(TEST_EXE)'
	@ printf '%-22s  => "%s"\n' 'TEST_OUT' '$(TEST_OUT)'

.PHONY: build clean debug

